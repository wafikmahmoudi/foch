<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Ubuntu Server LTS for x86-64) 2017.1.3 (Build 319_6U)" ts="2021-12-22 13:03:26">
<Project name="EnsExportProduction_2021-12-22 13-02-00_155+0" LastModified="2021-12-22 13:03:26.247448">
  <ProjectDescription>Studio Project generated from Ensemble Production 'FOCHANAMNESE.NewProduction2' at 2021-12-22 13:02:00.155 UTC</ProjectDescription>
  <Items>
    <ProjectItem name="FOCHANAMNESE.RouteurSIU12RoutingRule" type="CLS"></ProjectItem>
    <ProjectItem name="User.AnamneseAPISIU" type="CLS"></ProjectItem>
    <ProjectItem name="User.AnamnesegetToken" type="CLS"></ProjectItem>
    <ProjectItem name="Settings:APISIUrendezvous.PTD" type="PTD"></ProjectItem>
    <ProjectItem name="Settings:Email.PTD" type="PTD"></ProjectItem>
    <ProjectItem name="Settings:InputSIU.PTD" type="PTD"></ProjectItem>
    <ProjectItem name="Settings:Routeur_SIU12.PTD" type="PTD"></ProjectItem>
    <ProjectItem name="Settings:getTokenBS.PTD" type="PTD"></ProjectItem>
    <ProjectItem name="EnsExportNotes.EnsExportProduction_2021-12-22 13-02-00_155+0.PTD" type="PTD"></ProjectItem>
  </Items>
</Project>


<Class name="FOCHANAMNESE.RouteurSIU12RoutingRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66079,47289.184943</TimeChanged>
<TimeCreated>66079,47128.477064</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="FOCHANAMNESE.Routeur_SIU12RoutingRule" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="FOCHANAMNESE.NewProduction2">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="source" value="InputSIU"></constraint>
<when condition="DocName Contains &quot;S12&quot;">
<send transform="" target="APISIUrendezvous"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="User.AnamneseAPISIU">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66100,46323.430147</TimeChanged>
<TimeCreated>66073,52984.962135</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Parameter name="SETTINGS">
<Default>FilePath,Email,SSL,ServerHTTP,URL,ServerHTTPToken,URLToken</Default>
</Parameter>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="SSL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ServerHTTPToken">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="URLToken">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ServerHTTP">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="URL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Method name="test">
<FormalSpec>pInput:EnsLib.HL7.Message,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
		 
	try{
	hang 0.9
	 set token = ^Token
				
		   $$$LOGINFO("hello wafik")
             
           Set request=##class(%Net.HttpRequest).%New()
		    set HttpResponse=##class(%Net.HttpResponse).%New()

		      $$$LOGINFO("hello2")
		     set request.Https=1
		    set request.SSLConfiguration=..SSL
		   
		    Set request.Authorization=("Bearer a" _token)
           Set sc=request.SetHeader("Content-Disposition","attachment; filename=siu.hl7")
		   set request.ContentType = ("application/octet-stream")
		   
		   
		   set repertoire = ..FilePath_"/Ex33.hl7"
		     Set file=##class(%File).%New(repertoire)
			  Write file.Size
			  Do file.Open("WSN")
			  Do file.WriteLine(pInput.RawContent)
			  Do file.Close()
			  hang 0.5
			  
			  	set tFile=##class(%Stream.FileBinary).%New()
				do tFile.LinkToFile(repertoire)
				D request.EntityBody.CopyFrom(tFile)
				
          do ##class(%File).Delete(repertoire)
   
		       //set request.Server="orl.preprod.anamnese.me"
             //set status=request.Post("/api/consultation_hl7") 
             
		     set request.Server= ..ServerHTTP
             set status=request.Post(..URL)  
               D request.HttpResponse.OutputToDevice() 
             $$$LOGINFO("test0      "_status)

            $$$LOGINFO("test1      "_request.HttpResponse)
              //$$$LOGINFO("test2      "_request.HttpResponse.Data.Read())
                $$$LOGINFO("test3      "_request.HttpResponse.StatusCode)
                
             
                
             set objet = request.HttpResponse.Data.Read()
             //set linea.data = {}.%FromJSON(request.HttpResponse.Data.Read())

		   // $$$LOGINFO("objet "_linea)
		    //  $$$LOGINFO("objet "_jsonEvent)
		
		     $$$LOGINFO("resultat "_objet)
		     set x = $FIND(objet,"Motif")
             $$$LOGINFO("x : "_x)
		
             
             if (request.HttpResponse.StatusCode = 401)
             {
             $$$LOGINFO("****************new token******************")
             Set request=##class(%Net.HttpRequest).%New()
		     set HttpResponse=##class(%Net.HttpResponse).%New() 
		     set request.ContentType=("application/json; charset=UTF-8") 
		     set request.SSLConfiguration=..SSL
		      $$$LOGINFO("hello2")
		     set request.Https=1
		    
		     set Jsonbody={}
		     //set Jsonbody.username = "wafik.mahmoudi@synodis.fr_foch"
		      //set Jsonbody.password = "Wafik1990"
		      		    SET cr=##class(Ens.Config.Credentials).%OpenId("CredentialsLogin")
			SET UserName=cr.Username
			SET Password=cr.Password
			
		     set Jsonbody.username = UserName
		      set Jsonbody.password = cr.Password
		      do request.EntityBody.Write(Jsonbody.%ToJSON())
		     
		     
		     set request.Server=..ServerHTTPToken
     
             set status=request.Post(..URLToken)
             $$$LOGINFO("test"_status)
             Set Result = [].%FromJSON(request.HttpResponse.Data)
            $$$LOGINFO("Data retrieved :"_Result.%ToJSON())
            set token=Result.%Get("access")
         
             $$$LOGINFO("new token "_token)
             ////////////////////////////////////////// envoie de meme rendez vous////////////////////////
             hang 0.5
	         set token = ^Token
				
		   $$$LOGINFO("hello wafik 2")
             
           Set request=##class(%Net.HttpRequest).%New()
		    set HttpResponse=##class(%Net.HttpResponse).%New()

		      $$$LOGINFO("hello2")
		     set request.Https=1
		    set request.SSLConfiguration=..SSL
		   
		   Set request.Authorization=("Bearer " _token)
		   Set sc=request.SetHeader("Content-Disposition","attachment; filename=siu.hl7")
		   set request.ContentType = ("application/octet-stream")
		   
		   
		   set repertoire = ..FilePath_"/Ex33.hl7"
		     Set file=##class(%File).%New(repertoire)
			  Write file.Size
			  Do file.Open("WSN")
			  Do file.WriteLine(pInput.RawContent)
			  Do file.Close()
			  hang 0.5
			  
			  	set tFile=##class(%Stream.FileBinary).%New()
				do tFile.LinkToFile(repertoire)
				D request.EntityBody.CopyFrom(tFile)
				
          do ##class(%File).Delete(repertoire)
   
		   
		     set request.Server= ..ServerHTTP
             set status=request.Post(..URL)  
               D request.HttpResponse.OutputToDevice() 
             $$$LOGINFO("test      "_status)
             //Set Result = [].%FromJSON(request.HttpResponse.Data)
           //$$$LOGINFO("resultat :"_Result.%ToJSON())
            $$$LOGINFO("test      "_request.HttpResponse)
              ///$$$LOGINFO("test3      "_request.HttpResponse.Data.Read())
                $$$LOGINFO("test      "_request.HttpResponse.StatusCode)
                
                 set objet = request.HttpResponse.Data.Read()
                  $$$LOGINFO("objet : "_objet)
                 set x = $FIND(objet,"Motif")
                 $$$LOGINFO("x : "_x)
                       if (request.HttpResponse.StatusCode '= 200)
             {
           
              set alertRequest = ##class(Ens.AlertRequest).%New()  
               $$$LOGINFO("ddddddddddddddddddddddddd"_objet)
			  set alertRequest.SourceConfigName = request.HttpResponse.StatusCode
			  set alertRequest.AlertDestination = ..Email
			   //set alertRequest.AlertText = pInput.RawContent
			   set alertRequest.AlertText = objet
			   do ..SendRequestSync("Email",alertRequest,.pOutput)  
			   
			   $$$LOGINFO("Emailllllll envoyé dans le 401")
		}
		               if ((request.HttpResponse.StatusCode = 200) && (x>2))
             {
           
              set alertRequest = ##class(Ens.AlertRequest).%New()  
               $$$LOGINFO("ddddddddddddddddddddddddd"_objet)
			  set alertRequest.SourceConfigName = request.HttpResponse.StatusCode
			  set alertRequest.AlertDestination = ..Email
			   //set alertRequest.AlertText = pInput.RawContent
			   set alertRequest.AlertText = objet
			   do ..SendRequestSync("Email",alertRequest,.pOutput)  
			   
			   $$$LOGINFO("Emailllllll envoyé dans le 401 dans le 200 et x>2")
		}
		
		    $$$LOGINFO("resultat ")
             }
             
             
           ELSE
             {
         	  if ((request.HttpResponse.StatusCode = 200) && (x>2))
             {
           
              set alertRequest = ##class(Ens.AlertRequest).%New()  
               $$$LOGINFO("ddddddddddddddddddddddddd"_objet)
			  set alertRequest.SourceConfigName = request.HttpResponse.StatusCode
			  set alertRequest.AlertDestination = ..Email
			   //set alertRequest.AlertText = pInput.RawContent
			   set alertRequest.AlertText = objet
			   do ..SendRequestSync("Email",alertRequest,.pOutput)  
			   
			   $$$LOGINFO("Emailllllll envoyé dans le 401 dans le 200 et x>2")
		}
             ELSE
              {
               if ((request.HttpResponse.StatusCode '= 200))
             {
           
               set alertRequest = ##class(Ens.AlertRequest).%New()
              
               $$$LOGINFO("ddddddddddddddddddddddddd"_objet)
			  set alertRequest.SourceConfigName = request.HttpResponse.StatusCode
			  set alertRequest.AlertDestination = ..Email
			   //set alertRequest.AlertText = pInput.RawContent
			   set alertRequest.AlertText = objet
			   do ..SendRequestSync("Email",alertRequest,.pOutput)  
			   
			   $$$LOGINFO("Emailllllll envoyé")
			   }
			          	
          	}
             }
             
             
             
             Quit:$$$ISERR(status)
			
		
         
          
              } Catch ex {
              
              Set status= ex.AsStatus()
               $$$LOGINFO("res "_status)
                  }  
       
         Quit 1
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
    <MapItem MessageType="EnsLib.HL7.Message">
        <Method>test</Method>
    </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.AnamnesegetToken">
<Super>Ens.BusinessService</Super>
<TimeChanged>66093,58375.956403</TimeChanged>
<TimeCreated>66073,45603.521599</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Parameter name="SETTINGS">
<Default>TargetConfigNames,SSL,ServerHTTP,URL</Default>
</Parameter>

<Property name="TargetConfigNames">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="SSL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ServerHTTP">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="URL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
		 
	try{
				set ^Token=""
		  
				
		   $$$LOGINFO("hello wafik")
		 
		   
		     Set request=##class(%Net.HttpRequest).%New()
		     set HttpResponse=##class(%Net.HttpResponse).%New() 
		     set request.ContentType=("application/json; charset=UTF-8") 
		     set request.SSLConfiguration=..SSL
		      $$$LOGINFO("hello2")
		     set request.Https=1
		    
		     set Jsonbody={}
		    SET cr=##class(Ens.Config.Credentials).%OpenId("CredentialsLogin")
			SET UserName=cr.Username
			SET Password=cr.Password
			
		     set Jsonbody.username = UserName
		      set Jsonbody.password = cr.Password
		      do request.EntityBody.Write(Jsonbody.%ToJSON())
		     
		     
		     //set request.Server="preprod.anamnese.me"
     
             //set status=request.Post("/api/token/")
             
		     set request.Server=..ServerHTTP
     
             set status=request.Post(..URL)
             
             $$$LOGINFO("test"_status)
             Set Result = [].%FromJSON(request.HttpResponse.Data)
            $$$LOGINFO("Data retrieved :"_Result.%ToJSON())
            set token=Result.%Get("access")
         
             $$$LOGINFO("token "_token)
             set ^Token=token
       
             Quit:$$$ISERR(status)
          
              } Catch ex {
              
              Set status= ex.AsStatus()
               $$$LOGINFO("res "_status)
                  }  
       
         Quit 1
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
    <MapItem MessageType="EnsLib.HL7.Message">
        <Method>test</Method>
    </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Document name="EnsExportNotes.EnsExportProduction_2021-12-22 13-02-00_155+0.PTD"><ProjectTextDocument name="EnsExportNotes.EnsExportProduction_2021-12-22 13-02-00_155+0" description="Export Notes for export EnsExportProduction_2021-12-22 13-02-00_155+0">
<![CDATA[<Deployment>
<Creation>
<Machine>VM-FOCH-PRODENSDOCT-FC.E0GGSE2BK4JUNJXVU0LO0JHO0D.PARX.INTERNAL.CLOUDAPP.NET</Machine>
<Instance>ENSEMBLE</Instance>
<Namespace>FOCHANAMNESE</Namespace>
<SourceProduction>FOCHANAMNESE.NewProduction2</SourceProduction>
<Username>UnknownUser</Username>
<UTC>2021-12-22 13:03:26.239</UTC>
</Creation>
<Notes>
</Notes>
<Contents>
<ExportProject>EnsExportProduction_2021-12-22 13-02-00_155+0</ExportProject>
<Item num="1">FOCHANAMNESE.RouteurSIU12RoutingRule.CLS</Item>
<Item num="2">Settings:APISIUrendezvous.PTD</Item>
<Item num="3">Settings:Email.PTD</Item>
<Item num="4">Settings:InputSIU.PTD</Item>
<Item num="5">Settings:Routeur_SIU12.PTD</Item>
<Item num="6">Settings:getTokenBS.PTD</Item>
<Item num="7">User.AnamneseAPISIU.CLS</Item>
<Item num="8">User.AnamnesegetToken.CLS</Item>
</Contents>
<ProductionClassInExport></ProductionClassInExport>
</Deployment>

]]></ProjectTextDocument>
</Document>

<Document name="Settings:APISIUrendezvous.PTD"><ProjectTextDocument name="Settings:APISIUrendezvous" description="Settings for APISIUrendezvous in Production FOCHANAMNESE.NewProduction2">
<![CDATA[<Item Name="APISIUrendezvous" Category="" ClassName="User.AnamneseAPISIU" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule=""><Setting Target="Host" Name="FilePath">/home/WafikMA/input</Setting><Setting Target="Adapter" Name="Credentials"></Setting><Setting Target="Host" Name="Email">wafik.mahmoudi@synodis.fr</Setting><Setting Target="Host" Name="SSL">testWafik</Setting><Setting Target="Adapter" Name="SSLConfig"></Setting><Setting Target="Host" Name="ServerHTTP">orl.preprod.anamnese.me</Setting><Setting Target="Host" Name="ServerHTTPToken">preprod.anamnese.me</Setting><Setting Target="Host" Name="URL">/api/consultation_hl7</Setting><Setting Target="Host" Name="URLToken">/api/token/</Setting></Item>
]]></ProjectTextDocument>
</Document>

<Document name="Settings:Email.PTD"><ProjectTextDocument name="Settings:Email" description="Settings for Email in Production FOCHANAMNESE.NewProduction2">
<![CDATA[<Item Name="Email" Category="" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule=""><Setting Target="Adapter" Name="Cc">test2@synodis.fr</Setting><Setting Target="Adapter" Name="From">wafik@synodis.fr</Setting><Setting Target="Adapter" Name="Recipient">test@synodis.fr;test2@synodis.fr</Setting><Setting Target="Adapter" Name="SMTPServer"></Setting></Item>
]]></ProjectTextDocument>
</Document>

<Document name="Settings:InputSIU.PTD"><ProjectTextDocument name="Settings:InputSIU" description="Settings for InputSIU in Production FOCHANAMNESE.NewProduction2">
<![CDATA[<Item Name="InputSIU" Category="" ClassName="EnsLib.HL7.Service.TCPService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule=""><Setting Target="Host" Name="MessageSchemaCategory"></Setting><Setting Target="Host" Name="TargetConfigNames">Routeur_SIU12</Setting><Setting Target="Adapter" Name="Port"></Setting></Item>
]]></ProjectTextDocument>
</Document>

<Document name="Settings:Routeur_SIU12.PTD"><ProjectTextDocument name="Settings:Routeur_SIU12" description="Settings for Routeur_SIU12 in Production FOCHANAMNESE.NewProduction2">
<![CDATA[<Item Name="Routeur_SIU12" Category="" ClassName="EnsLib.HL7.MsgRouter.RoutingEngine" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule=""><Setting Target="Host" Name="Validation"></Setting><Setting Target="Host" Name="BusinessRuleName">FOCHANAMNESE.RouteurSIU12RoutingRule</Setting></Item>
]]></ProjectTextDocument>
</Document>

<Document name="Settings:getTokenBS.PTD"><ProjectTextDocument name="Settings:getTokenBS" description="Settings for getTokenBS in Production FOCHANAMNESE.NewProduction2">
<![CDATA[<Item Name="getTokenBS" Category="" ClassName="User.AnamnesegetToken" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule=""><Setting Target="Adapter" Name="CallInterval">7200</Setting><Setting Target="Host" Name="SSL">testWafik</Setting><Setting Target="Host" Name="ServerHTTP">preprod.anamnese.me</Setting><Setting Target="Host" Name="URL">/api/token/</Setting></Item>
]]></ProjectTextDocument>
</Document></Export>
